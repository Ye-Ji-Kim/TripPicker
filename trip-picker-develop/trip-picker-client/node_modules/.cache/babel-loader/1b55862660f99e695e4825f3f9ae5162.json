{"ast":null,"code":"var _jsxFileName = \"/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/components/RegionSelectMap.js\";\nimport React from \"react\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst RegionSelectMap = () => {\n  const createSelectItems = () => {\n    let items = [];\n\n    for (let i = 0; i <= this.props.maxValue; i++) {\n      items.push(React.createElement(\"option\", {\n        key: i,\n        value: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, i)); //here I will be creating my options dynamically based on\n      //what props are currently passed to the parent component\n    }\n\n    return items;\n  };\n\n  const onDropdownSelected = e => {\n    console.log(\"THE VAL\", e.target.value);\n  };\n\n  const getSidoOptions = () => {\n    const sidos = new Set();\n    Object.keys(regionInfo).forEach(regionCode => {\n      const sido = regionInfo[regionCode].sido;\n      sidos.add(sido);\n    });\n    const sidosList = Array.from(sidos);\n    return sidosList.map(sido => React.createElement(\"option\", {\n      value: sido,\n      key: sido,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"select\",\n    onChange: onDropdownSelected,\n    label: \"sido\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"123\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"123\"), getSidoOptions()));\n};\n\nexport default RegionSelectMap;","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/components/RegionSelectMap.js"],"names":["React","DaumPostcode","regionInfo","RegionSelectMap","createSelectItems","items","i","props","maxValue","push","onDropdownSelected","e","console","log","target","value","getSidoOptions","sidos","Set","Object","keys","forEach","regionCode","sido","add","sidosList","Array","from","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKC,KAAL,CAAWC,QAAhC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7CD,MAAAA,KAAK,CAACI,IAAN,CACE;AAAQ,QAAA,GAAG,EAAEH,CAAb;AAAgB,QAAA,KAAK,EAAEA,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,CADH,CADF,EAD6C,CAM7C;AACA;AACD;;AACD,WAAOD,KAAP;AACD,GAZD;;AAcA,QAAMK,kBAAkB,GAAGC,CAAC,IAAI;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAC,CAACG,MAAF,CAASC,KAAhC;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYlB,UAAZ,EAAwBmB,OAAxB,CAAgCC,UAAU,IAAI;AAAA,YACpCC,IADoC,GAC3BrB,UAAU,CAACoB,UAAD,CADiB,CACpCC,IADoC;AAE5CN,MAAAA,KAAK,CAACO,GAAN,CAAUD,IAAV;AACD,KAHD;AAIA,UAAME,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWV,KAAX,CAAlB;AACA,WAAOQ,SAAS,CAACG,GAAV,CAAcL,IAAI,IAAI;AAAQ,MAAA,KAAK,EAAEA,IAAf;AAAqB,MAAA,GAAG,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CAAP;AACD,GARD;;AASA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,QAAQ,EAAEb,kBAA/B;AAAmD,IAAA,KAAK,EAAC,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,EAEGM,cAAc,EAFjB,CADF,CADF;AAQD,CApCD;;AAsCA,eAAeb,eAAf","sourcesContent":["import React from \"react\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst RegionSelectMap = () => {\n  const createSelectItems = () => {\n    let items = [];\n    for (let i = 0; i <= this.props.maxValue; i++) {\n      items.push(\n        <option key={i} value={i}>\n          {i}\n        </option>\n      );\n      //here I will be creating my options dynamically based on\n      //what props are currently passed to the parent component\n    }\n    return items;\n  };\n\n  const onDropdownSelected = e => {\n    console.log(\"THE VAL\", e.target.value);\n  };\n\n  const getSidoOptions = () => {\n    const sidos = new Set();\n    Object.keys(regionInfo).forEach(regionCode => {\n      const { sido } = regionInfo[regionCode];\n      sidos.add(sido);\n    });\n    const sidosList = Array.from(sidos);\n    return sidosList.map(sido => <option value={sido} key={sido}></option>);\n  };\n  return (\n    <div>\n      <input type=\"select\" onChange={onDropdownSelected} label=\"sido\">\n        <option value=\"123\">123</option>\n        {getSidoOptions()}\n      </input>\n    </div>\n  );\n};\n\nexport default RegionSelectMap;\n"]},"metadata":{},"sourceType":"module"}