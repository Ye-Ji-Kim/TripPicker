{"ast":null,"code":"import Axios from \"axios\";\n\nconst getUrl = subject => {\n  const rootUrl = \"https://jsonplaceholder.typicode.com\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/user/\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/signup/validateEmail?email=\";\n\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  }); // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(({data}) => dispatch({ type: \"LOGIN_SUCCESS\", payload: data.id }))\n  //   .catch(error => dispatch({ type: \"LOGIN_FAIL\", payload: \"로그인 실패\" }));\n  // Below: TEST\n\n  dispatch({\n    type: \"LOGIN_SUCCESS\",\n    payload: 5\n  });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  dispatch({\n    type: \"REGISTER_FAIL\",\n    payload: \"중복된 이메일입니다\"\n  }); // const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({ data }) => {\n  //   if (data.status === 204) {\n  //     dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  //     return true;\n  //   }\n  //   else return false;\n  // }).catch(_=>dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n  //\n  // if (isDuplicated) return;\n  // Axios.post(getUrl(\"REGISTER\"), data).then(({ data }) => {\n  //   if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n  //   else throw Error(\"\")\n  // }).catch(_=>dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n  // Below: TEST\n\n  dispatch({\n    type: \"REGISTER_SUCCESS\"\n  });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"login\":\n      return login(dispatch, data);\n\n    case \"register\":\n      return register(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","getUrl","subject","rootUrl","login","dispatch","data","type","payload","register","axios","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,IAAI;AACxB,QAAMC,OAAO,GAAG,sCAAhB;;AACA,UAAQD,OAAR;AACE,SAAK,OAAL;AACE,aAAOC,OAAO,GAAG,QAAjB;;AACF,SAAK,UAAL;AACE,aAAOA,OAAO,GAAG,gBAAjB;;AACF,SAAK,eAAL;AACE,aAAOA,OAAO,GAAG,oCAAjB;;AACF;AACE,aAAOA,OAAP;AARJ;AAUD,CAZD;;AAcA,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAChCD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR,CADgC,CAEhC;AACA;AACA;AAEA;;AACAF,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAAD,CAAR;AACD,CARD;;AAUA,MAAMC,QAAQ,GAAG,OAAOJ,QAAP,EAAiBC,IAAjB,KAA0B;AACzCD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACAF,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAAD,CAAR,CAFyC,CAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACAH,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACD,CApBD;;AAsBA,MAAMG,KAAK,GAAG,CAACC,MAAD,EAASN,QAAT,EAAmBC,IAAnB,KAA4B;AACxC,UAAQK,MAAR;AACE,SAAK,OAAL;AACE,aAAOP,KAAK,CAACC,QAAD,EAAWC,IAAX,CAAZ;;AACF,SAAK,UAAL;AACE,aAAOG,QAAQ,CAACJ,QAAD,EAAWC,IAAX,CAAf;;AACF;AACE;AANJ;AAQD,CATD;;AAWA,SAASI,KAAT","sourcesContent":["import Axios from \"axios\";\n\nconst getUrl = subject => {\n  const rootUrl = \"https://jsonplaceholder.typicode.com\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/user/\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/signup/validateEmail?email=\";\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(({data}) => dispatch({ type: \"LOGIN_SUCCESS\", payload: data.id }))\n  //   .catch(error => dispatch({ type: \"LOGIN_FAIL\", payload: \"로그인 실패\" }));\n\n  // Below: TEST\n  dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({ data }) => {\n  //   if (data.status === 204) {\n  //     dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  //     return true;\n  //   }\n  //   else return false;\n  // }).catch(_=>dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n  //\n  // if (isDuplicated) return;\n\n  // Axios.post(getUrl(\"REGISTER\"), data).then(({ data }) => {\n  //   if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n  //   else throw Error(\"\")\n  // }).catch(_=>dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n\n  // Below: TEST\n  dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"login\":\n      return login(dispatch, data);\n    case \"register\":\n      return register(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}