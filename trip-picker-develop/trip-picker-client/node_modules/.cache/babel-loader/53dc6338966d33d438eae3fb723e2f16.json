{"ast":null,"code":"import Axios from \"axios\";\n\nconst getUrl = subject => {\n  const rootUrl = \"https://jsonplaceholder.typicode.com\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/user/\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/signup/validateEmail?email=\";\n\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  }); // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(response => dispatch({ type: \"LOGIN_SUCCESS\", payload: response.id }))\n  //   .catch(error => dispatch({ type: \"LOGIN_FAIL\", payload: \"로그인 실패\" }));\n  // Below: TEST\n\n  dispatch({\n    type: \"LOGIN_SUCCESS\",\n    payload: 5\n  });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({\n    data\n  }) => {\n    if (data.status === 204) {\n      dispatch({\n        type: \"REGISTER_FAIL\",\n        payload: \"중복된 이메일입니다\"\n      });\n      return true;\n    }\n\n    return false;\n  });\n  Axios.post(getUrl(\"REGISTER\"), data).then(response => dispatch({\n    type: \"REGISTER_SUCCESS\",\n    payload: response.id\n  })).catch(_ => dispatch({\n    type: \"REGISTER_SUCCESS\",\n    payload: \"회원가입 실패\"\n  })); // Below: TEST\n\n  dispatch({\n    type: \"LOGIN_SUCCESS\",\n    payload: 5\n  });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"login\":\n      return login(dispatch, data);\n\n    case \"register\":\n      return register(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","getUrl","subject","rootUrl","login","dispatch","data","type","payload","register","isDuplicated","get","email","then","status","post","response","id","catch","_","axios","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,IAAI;AACxB,QAAMC,OAAO,GAAG,sCAAhB;;AACA,UAAQD,OAAR;AACE,SAAK,OAAL;AACE,aAAOC,OAAO,GAAG,QAAjB;;AACF,SAAK,UAAL;AACE,aAAOA,OAAO,GAAG,gBAAjB;;AACF,SAAK,eAAL;AACE,aAAOA,OAAO,GAAG,oCAAjB;;AACF;AACE,aAAOA,OAAP;AARJ;AAUD,CAZD;;AAcA,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAChCD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR,CADgC,CAEhC;AACA;AACA;AAEA;;AACAF,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAAD,CAAR;AACD,CARD;;AAUA,MAAMC,QAAQ,GAAG,OAAOJ,QAAP,EAAiBC,IAAjB,KAA0B;AACzCD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACA,QAAMG,YAAY,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUV,MAAM,CAAC,eAAD,CAAN,GAA0BK,IAAI,CAACM,KAAzC,EAAgDC,IAAhD,CAAqD,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAc;AAC5F,QAAIA,IAAI,CAACQ,MAAL,KAAgB,GAApB,EAAyB;AACvBT,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAE;AAAlC,OAAD,CAAR;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAN0B,CAA3B;AAOAR,EAAAA,KAAK,CAACe,IAAN,CAAWd,MAAM,CAAC,UAAD,CAAjB,EAA+BK,IAA/B,EACGO,IADH,CACQG,QAAQ,IAAIX,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,OAAO,EAAEQ,QAAQ,CAACC;AAA9C,GAAD,CAD5B,EAEGC,KAFH,CAESC,CAAC,IAAId,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,OAAO,EAAE;AAArC,GAAD,CAFtB,EATyC,CAazC;;AACAH,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAAD,CAAR;AACD,CAfD;;AAiBA,MAAMY,KAAK,GAAG,CAACC,MAAD,EAAShB,QAAT,EAAmBC,IAAnB,KAA4B;AACxC,UAAQe,MAAR;AACE,SAAK,OAAL;AACE,aAAOjB,KAAK,CAACC,QAAD,EAAWC,IAAX,CAAZ;;AACF,SAAK,UAAL;AACE,aAAOG,QAAQ,CAACJ,QAAD,EAAWC,IAAX,CAAf;;AACF;AACE;AANJ;AAQD,CATD;;AAWA,SAASc,KAAT","sourcesContent":["import Axios from \"axios\";\n\nconst getUrl = subject => {\n  const rootUrl = \"https://jsonplaceholder.typicode.com\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/user/\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/signup/validateEmail?email=\";\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(response => dispatch({ type: \"LOGIN_SUCCESS\", payload: response.id }))\n  //   .catch(error => dispatch({ type: \"LOGIN_FAIL\", payload: \"로그인 실패\" }));\n\n  // Below: TEST\n  dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({ data }) => {\n    if (data.status === 204) {\n      dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n      return true;\n    }\n    return false;\n  });\n  Axios.post(getUrl(\"REGISTER\"), data)\n    .then(response => dispatch({ type: \"REGISTER_SUCCESS\", payload: response.id }))\n    .catch(_ => dispatch({ type: \"REGISTER_SUCCESS\", payload: \"회원가입 실패\" }));\n\n  // Below: TEST\n  dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"login\":\n      return login(dispatch, data);\n    case \"register\":\n      return register(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}