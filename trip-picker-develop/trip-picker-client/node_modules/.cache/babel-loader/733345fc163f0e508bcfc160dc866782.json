{"ast":null,"code":"import Axios from \"axios\";\nimport { regionInfo } from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n\n    case \"GET_REGION\":\n      return rootUrl + \"???\";\n\n    case \"UPDATE_REGION\":\n      return rootUrl + \"???\";\n\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  Axios.post(getUrl(\"LOGIN\"), data).then(({\n    data\n  }) => {\n    if (data.status === 200) dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: data.data.userIdx\n    });else throw new Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"LOGIN_FAIL\"\n  })); // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({\n    data\n  }) => {\n    if (data.status === 204) {\n      dispatch({\n        type: \"REGISTER_FAIL\",\n        payload: \"중복된 이메일입니다\"\n      });\n      return true;\n    } else return false;\n  }).catch(_ => {\n    dispatch({\n      type: \"REGISTER_FAIL\",\n      payload: \"회원가입에 실패했습니다\"\n    });\n    return true;\n  });\n  if (isDuplicated) return;\n  Axios.post(getUrl(\"REGISTER\"), data).then(({\n    data\n  }) => {\n    if (data.status === 201) return dispatch({\n      type: \"REGISTER_SUCCESS\",\n      payload: data.id\n    });else throw Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"REGISTER_FAIL\",\n    payload: \"회원가입에 실패했습니다\"\n  })); // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // TODO: 현재 해당 url이 작동하지 않음 + 원하는 결과(지역값)가 아님.\n  // const response = await Axios.get(getUrl(\"GET_REGION\" + data.id));\n  // if (response.status === 200) dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n  // Below: TEST\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: \"서울 마포구\"\n  });\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // TODO: 보내는 URL 체크, data 형태 체크\n  // await Axios.post(getUrl(\"UPDATE_REGION\"), data);\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: data.region\n  });\n};\n\nconst recommentRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  console.log(\"?\");\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: \"서울 마포구\"\n  });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n\n    case \"REGISTER\":\n      return register(dispatch, data);\n\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n\n    case \"RECOMMEND_REGION\":\n      return recommentRegion(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","regionInfo","getUrl","subject","rootUrl","login","dispatch","data","type","post","then","status","payload","userIdx","Error","catch","_","register","isDuplicated","get","email","id","getRegion","updateRegion","region","recommentRegion","console","log","axios","action"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport { regionInfo } from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n    case \"GET_REGION\":\n      return rootUrl + \"???\";\n    case \"UPDATE_REGION\":\n      return rootUrl + \"???\";\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  Axios.post(getUrl(\"LOGIN\"), data)\n    .then(({ data }) => {\n      if (data.status === 200) dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data.userIdx });\n      else throw new Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"LOGIN_FAIL\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email)\n    .then(({ data }) => {\n      if (data.status === 204) {\n        dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n        return true;\n      } else return false;\n    })\n    .catch(_ => {\n      dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n      return true;\n    });\n\n  if (isDuplicated) return;\n\n  Axios.post(getUrl(\"REGISTER\"), data)\n    .then(({ data }) => {\n      if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n      else throw Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // TODO: 현재 해당 url이 작동하지 않음 + 원하는 결과(지역값)가 아님.\n  // const response = await Axios.get(getUrl(\"GET_REGION\" + data.id));\n  // if (response.status === 200) dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n  // Below: TEST\n  dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\nconst updateRegion = async (dispatch, data) => {\n  // TODO: 보내는 URL 체크, data 형태 체크\n  // await Axios.post(getUrl(\"UPDATE_REGION\"), data);\n  dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n};\n\nconst recommentRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  console.log(\"?\");\n  dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n    case \"REGISTER\":\n      return register(dispatch, data);\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n    case \"RECOMMEND_REGION\":\n      return recommentRegion(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}