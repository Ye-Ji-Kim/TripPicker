{"ast":null,"code":"import Axios from \"axios\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n\n    case \"GET_REGION\":\n      return rootUrl + \"/users/locations/\";\n\n    case \"UPDATE_REGION\":\n      return rootUrl + \"/users/locations\";\n\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"GET_FEED\":\n      return rootUrl + \"/items?isSelected=true&userIdx=\";\n\n    case \"ADD_FAVORITE\":\n      return rootUrl + \"/bookmarks\";\n\n    case \"REMOVE_FAVORITE\":\n      return rootUrl + \"/bookmarks/cancel\";\n\n    case \"ADD_LIKE\":\n      return rootUrl + \"/likes/\";\n\n    case \"REMOVE_LIKE\":\n      return rootUrl + \"/likes/cancel\";\n\n    case \"GET_FAVORITES\":\n      return rootUrl + \"?\";\n\n    default:\n      console.log(\"wrong URL call!\");\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  Axios.post(getUrl(\"LOGIN\"), data).then(({\n    data\n  }) => {\n    if (data.status === 200) dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: data.data.userIdx\n    });else throw new Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"LOGIN_FAIL\"\n  })); // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({\n    data\n  }) => {\n    if (data.status === 204) {\n      dispatch({\n        type: \"REGISTER_FAIL\",\n        payload: \"중복된 이메일입니다\"\n      });\n      return true;\n    } else return false;\n  }).catch(_ => {\n    dispatch({\n      type: \"REGISTER_FAIL\",\n      payload: \"회원가입에 실패했습니다\"\n    });\n    return true;\n  });\n  if (isDuplicated) return;\n  Axios.post(getUrl(\"REGISTER\"), data).then(({\n    data\n  }) => {\n    if (data.status === 201) return dispatch({\n      type: \"REGISTER_SUCCESS\",\n      payload: data.id\n    });else throw Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"REGISTER_FAIL\",\n    payload: \"회원가입에 실패했습니다\"\n  })); // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_REGION\") + data.id);\n\n  if (response.data.status === 200) {\n    dispatch({\n      type: \"UPDATE_REGION\",\n      payload: response.data.data.region\n    });\n  } // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const region = data.region,\n        userIdx = data.userIdx;\n  let areaCode, sggCode;\n  Object.keys(regionInfo).forEach(key => {\n    const _regionInfo$key = regionInfo[key],\n          fullRegion = _regionInfo$key.fullRegion,\n          sidoCode = _regionInfo$key.sidoCode,\n          sigunguCode = _regionInfo$key.sigunguCode;\n\n    if (fullRegion === region) {\n      areaCode = sidoCode;\n      sggCode = sigunguCode;\n    }\n  });\n  await Axios.post(getUrl(\"UPDATE_REGION\"), {\n    userIdx,\n    region,\n    areaCode,\n    sggCode\n  });\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: region\n  });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: \"서울 마포구\"\n  });\n};\n\nconst getPersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  if (response.data.status === 200) dispatch({\n    type: \"UPDATE_PERSONALITY\",\n    payload: response.data.data.personalityType\n  }); // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  dispatch({\n    type: \"UPDATE_PERSONALITY\",\n    payload: data.personalityType\n  });\n};\n\nconst getFeed = async (dispatch, data) => {\n  // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  let feed, likes, favorites;\n  let payload = {\n    feed: feed || [],\n    favorites: favorites || [],\n    likes: likes || []\n  }; // 로딩 화면을 보여주기 위해\n\n  dispatch({\n    type: \"UPDATE_FEED\",\n    payload: payload\n  });\n  let response = await Axios.get(getUrl(\"GET_FEED\") + data.userIdx).catch(_ => []);\n  if (response.data.status === 200) feed = response.data.data;\n  payload = {\n    feed: feed || [],\n    favorites: favorites || [],\n    likes: likes || []\n  };\n  dispatch({\n    type: \"UPDATE_FEED\",\n    payload: payload\n  }); // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n};\n\nconst addFavorite = async (dispatch, data) => {\n  // 기능 체크 완료\n  // 1. 서버에 업데이트 콜 보내고\n  await Axios.post(getUrl(\"ADD_FAVORITE\"), data); // 2. 디스패치 (안해도 될 것 같은데)\n  // dispatch({ type: \"UPDATE_FAVORITE\", payload: data.favorites });\n};\n\nconst removeFavorite = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"REMOVE_FAVORITE\"), data);\n};\n\nconst addLike = async (dispatch, data) => {\n  // 기능 체크 완료\n  // 1. 서버에 업데이트 콜 보내고\n  await Axios.post(getUrl(\"ADD_LIKE\"), data); // 2. 디스패치 (안해도 될 것 같은데)\n  // dispatch({ type: \"UPDATE_LIKE\", payload: data.Likes });\n};\n\nconst removeLike = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"REMOVE_LIKE\"), data);\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n\n    case \"REGISTER\":\n      return register(dispatch, data);\n\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n\n    case \"GET_FEED\":\n      return getFeed(dispatch, data);\n\n    case \"ADD_FAVORITE\":\n      return addFavorite(dispatch, data);\n\n    case \"REMOVE_FAVORITE\":\n      return removeFavorite(dispatch, data);\n\n    case \"ADD_LIKE\":\n      return addLike(dispatch, data);\n\n    case \"REMOVE_LIKE\":\n      return removeLike(dispatch, data);\n\n    case \"GET_FAVORITES\":\n      return getFavorites(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","regionInfo","getUrl","subject","rootUrl","console","log","login","dispatch","data","type","post","then","status","payload","userIdx","Error","catch","_","register","isDuplicated","get","email","id","getRegion","response","region","updateRegion","areaCode","sggCode","Object","keys","forEach","key","fullRegion","sidoCode","sigunguCode","recommenDRegion","getPersonality","personalityType","updatePersonality","getFeed","feed","likes","favorites","addFavorite","removeFavorite","addLike","removeLike","axios","action","getFavorites"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n    case \"GET_REGION\":\n      return rootUrl + \"/users/locations/\";\n    case \"UPDATE_REGION\":\n      return rootUrl + \"/users/locations\";\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"GET_FEED\":\n      return rootUrl + \"/items?isSelected=true&userIdx=\";\n    case \"ADD_FAVORITE\":\n      return rootUrl + \"/bookmarks\";\n    case \"REMOVE_FAVORITE\":\n      return rootUrl + \"/bookmarks/cancel\";\n    case \"ADD_LIKE\":\n      return rootUrl + \"/likes/\";\n    case \"REMOVE_LIKE\":\n      return rootUrl + \"/likes/cancel\";\n    case \"GET_FAVORITES\":\n      return rootUrl + \"?\";\n    default:\n      console.log(\"wrong URL call!\");\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({ type: \"LOGIN_TRY\" });\n  Axios.post(getUrl(\"LOGIN\"), data)\n    .then(({ data }) => {\n      if (data.status === 200) dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data.userIdx });\n      else throw new Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"LOGIN_FAIL\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({ type: \"LOGIN_TRY\" });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email)\n    .then(({ data }) => {\n      if (data.status === 204) {\n        dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n        return true;\n      } else return false;\n    })\n    .catch(_ => {\n      dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n      return true;\n    });\n\n  if (isDuplicated) return;\n\n  Axios.post(getUrl(\"REGISTER\"), data)\n    .then(({ data }) => {\n      if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n      else throw Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_REGION\") + data.id);\n  if (response.data.status === 200) {\n    dispatch({ type: \"UPDATE_REGION\", payload: response.data.data.region });\n  }\n\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const { region, userIdx } = data;\n  let areaCode, sggCode;\n  Object.keys(regionInfo).forEach(key => {\n    const { fullRegion, sidoCode, sigunguCode } = regionInfo[key];\n    if (fullRegion === region) {\n      areaCode = sidoCode;\n      sggCode = sigunguCode;\n    }\n  });\n  await Axios.post(getUrl(\"UPDATE_REGION\"), { userIdx, region, areaCode, sggCode });\n  dispatch({ type: \"UPDATE_REGION\", payload: region });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst getPersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  if (response.data.status === 200) dispatch({ type: \"UPDATE_PERSONALITY\", payload: response.data.data.personalityType });\n\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  dispatch({ type: \"UPDATE_PERSONALITY\", payload: data.personalityType });\n};\n\nconst getFeed = async (dispatch, data) => {\n  // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  let feed, likes, favorites;\n  let payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] }; // 로딩 화면을 보여주기 위해\n  dispatch({ type: \"UPDATE_FEED\", payload: payload });\n  let response = await Axios.get(getUrl(\"GET_FEED\") + data.userIdx).catch(_ => []);\n  if (response.data.status === 200) feed = response.data.data;\n  payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] };\n  dispatch({ type: \"UPDATE_FEED\", payload: payload });\n  // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n};\n\nconst addFavorite = async (dispatch, data) => {\n  // 기능 체크 완료\n  // 1. 서버에 업데이트 콜 보내고\n  await Axios.post(getUrl(\"ADD_FAVORITE\"), data);\n  // 2. 디스패치 (안해도 될 것 같은데)\n  // dispatch({ type: \"UPDATE_FAVORITE\", payload: data.favorites });\n};\n\nconst removeFavorite = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"REMOVE_FAVORITE\"), data);\n};\n\nconst addLike = async (dispatch, data) => {\n  // 기능 체크 완료\n  // 1. 서버에 업데이트 콜 보내고\n  await Axios.post(getUrl(\"ADD_LIKE\"), data);\n  // 2. 디스패치 (안해도 될 것 같은데)\n  // dispatch({ type: \"UPDATE_LIKE\", payload: data.Likes });\n};\n\nconst removeLike = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"REMOVE_LIKE\"), data);\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n    case \"REGISTER\":\n      return register(dispatch, data);\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n    case \"GET_FEED\":\n      return getFeed(dispatch, data);\n    case \"ADD_FAVORITE\":\n      return addFavorite(dispatch, data);\n    case \"REMOVE_FAVORITE\":\n      return removeFavorite(dispatch, data);\n    case \"ADD_LIKE\":\n      return addLike(dispatch, data);\n    case \"REMOVE_LIKE\":\n      return removeLike(dispatch, data);\n    case \"GET_FAVORITES\":\n      return getFavorites(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}