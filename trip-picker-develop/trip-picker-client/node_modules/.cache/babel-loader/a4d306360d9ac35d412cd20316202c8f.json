{"ast":null,"code":"import Axios from \"axios\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n\n    case \"GET_REGION\":\n      return rootUrl + \"/users/locations/\";\n\n    case \"UPDATE_REGION\":\n      return rootUrl + \"/users/locations\";\n\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"GET_FEED\":\n      return rootUrl + \"/items?isSelected=true&userIdx=\";\n\n    case \"UPDATE_FAVORITES\":\n      return rootUrl + \"/?\";\n\n    case \"UPDATE_LIKES\":\n      return rootUrl + \"/?\";\n\n    default:\n      console.log(\"wrong URL call!\");\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  Axios.post(getUrl(\"LOGIN\"), data).then(({\n    data\n  }) => {\n    if (data.status === 200) dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: data.data.userIdx\n    });else throw new Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"LOGIN_FAIL\"\n  })); // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({\n    type: \"LOGIN_TRY\"\n  });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email).then(({\n    data\n  }) => {\n    if (data.status === 204) {\n      dispatch({\n        type: \"REGISTER_FAIL\",\n        payload: \"중복된 이메일입니다\"\n      });\n      return true;\n    } else return false;\n  }).catch(_ => {\n    dispatch({\n      type: \"REGISTER_FAIL\",\n      payload: \"회원가입에 실패했습니다\"\n    });\n    return true;\n  });\n  if (isDuplicated) return;\n  Axios.post(getUrl(\"REGISTER\"), data).then(({\n    data\n  }) => {\n    if (data.status === 201) return dispatch({\n      type: \"REGISTER_SUCCESS\",\n      payload: data.id\n    });else throw Error(\"\");\n  }).catch(_ => dispatch({\n    type: \"REGISTER_FAIL\",\n    payload: \"회원가입에 실패했습니다\"\n  })); // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_REGION\") + data.id);\n\n  if (response.data.status === 200) {\n    const _response$data$data = response.data.data,\n          areaCode = _response$data$data.areaCode,\n          sggCode = _response$data$data.sggCode,\n          fullRegion = _response$data$data.fullRegion;\n    let region;\n    Object.keys(regionInfo).forEach(key => {\n      const _regionInfo$key = regionInfo[key],\n            sidoCode = _regionInfo$key.sidoCode,\n            sigunguCode = _regionInfo$key.sigunguCode,\n            fullRegion = _regionInfo$key.fullRegion;\n      if (sidoCode === areaCode && sigunguCode === sggCode) region = fullRegion;\n    });\n    dispatch({\n      type: \"UPDATE_REGION\",\n      payload: region\n    });\n  } // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const region = data.region,\n        userIdx = data.userIdx;\n  let areaCode, sggCode;\n  Object.keys(regionInfo).forEach(key => {\n    const _regionInfo$key2 = regionInfo[key],\n          fullRegion = _regionInfo$key2.fullRegion,\n          sidoCode = _regionInfo$key2.sidoCode,\n          sigunguCode = _regionInfo$key2.sigunguCode;\n\n    if (fullRegion === region) {\n      areaCode = sidoCode;\n      sggCode = sigunguCode;\n    }\n  });\n  await Axios.post(getUrl(\"UPDATE_REGION\"), {\n    userIdx,\n    region,\n    areaCode,\n    sggCode\n  });\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: region\n  });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: \"서울 마포구\"\n  });\n};\n\nconst getPersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  if (response.status === 200) dispatch({\n    type: \"UPDATE_PERSONALITY\",\n    payload: response.data.data.personalityType\n  }); // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  dispatch({\n    type: \"UPDATE_PERSONALITY\",\n    payload: data.personalityType\n  });\n};\n\nconst getFeed = async (dispatch, data) => {\n  // // // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  const feed = await Axios.get(getUrl(\"GET_FEED\") + data.userIdx).catch(_ => []);\n  console.log(1, feed.data.data); // // // 2. 내 즐겨찾기 아이템들\n  // const favorites = await Axios.post(getUrl(\"GET_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // // // 3. 내 좋아요 아이템들\n  // const likes = await Axios.post(getUrl(\"GET_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // const payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n  // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n};\n\nconst updateFavorites = async (dispatch, data) => {\n  // 1. 서버에 업데이트 콜 보내고\n  // await Axios.post(getUrl(\"UPDATE_FAVORITES\"), { data });\n  // 2. 디스패치\n  dispatch({\n    type: \"UPDATE_FAVORITES\",\n    payload: data.favorites\n  });\n};\n\nconst updateLikes = async (dispatch, data) => {\n  // 1. 서버에 업데이트 콜 보내고\n  // await Axios.post(getUrl(\"UPDATE_FAVORITES\"), { data });\n  // 2. 디스패치\n  dispatch({\n    type: \"UPDATE_LIKES\",\n    payload: data.likes\n  });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n\n    case \"REGISTER\":\n      return register(dispatch, data);\n\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n\n    case \"GET_FEED\":\n      return getFeed(dispatch, data);\n\n    case \"UPDATE_Favorites\":\n      return updateFavorites(dispatch, data);\n\n    case \"UPDATE_Likes\":\n      return updateLikes(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","regionInfo","getUrl","subject","rootUrl","console","log","login","dispatch","data","type","post","then","status","payload","userIdx","Error","catch","_","register","isDuplicated","get","email","id","getRegion","response","areaCode","sggCode","fullRegion","region","Object","keys","forEach","key","sidoCode","sigunguCode","updateRegion","recommenDRegion","getPersonality","personalityType","updatePersonality","getFeed","feed","updateFavorites","favorites","updateLikes","likes","axios","action"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport regionInfo from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n    case \"GET_REGION\":\n      return rootUrl + \"/users/locations/\";\n    case \"UPDATE_REGION\":\n      return rootUrl + \"/users/locations\";\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"GET_FEED\":\n      return rootUrl + \"/items?isSelected=true&userIdx=\";\n    case \"UPDATE_FAVORITES\":\n      return rootUrl + \"/?\";\n    case \"UPDATE_LIKES\":\n      return rootUrl + \"/?\";\n    default:\n      console.log(\"wrong URL call!\");\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({ type: \"LOGIN_TRY\" });\n  Axios.post(getUrl(\"LOGIN\"), data)\n    .then(({ data }) => {\n      if (data.status === 200) dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data.userIdx });\n      else throw new Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"LOGIN_FAIL\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  // 기능 체크 완료\n  dispatch({ type: \"LOGIN_TRY\" });\n  const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email)\n    .then(({ data }) => {\n      if (data.status === 204) {\n        dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n        return true;\n      } else return false;\n    })\n    .catch(_ => {\n      dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n      return true;\n    });\n\n  if (isDuplicated) return;\n\n  Axios.post(getUrl(\"REGISTER\"), data)\n    .then(({ data }) => {\n      if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n      else throw Error(\"\");\n    })\n    .catch(_ => dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  // dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_REGION\") + data.id);\n  if (response.data.status === 200) {\n    const { areaCode, sggCode, fullRegion } = response.data.data;\n    let region;\n    Object.keys(regionInfo).forEach(key => {\n      const { sidoCode, sigunguCode, fullRegion } = regionInfo[key];\n      if (sidoCode === areaCode && sigunguCode === sggCode) region = fullRegion;\n    });\n    dispatch({ type: \"UPDATE_REGION\", payload: region });\n  }\n\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // 기능 체크 완료\n  const { region, userIdx } = data;\n  let areaCode, sggCode;\n  Object.keys(regionInfo).forEach(key => {\n    const { fullRegion, sidoCode, sigunguCode } = regionInfo[key];\n    if (fullRegion === region) {\n      areaCode = sidoCode;\n      sggCode = sigunguCode;\n    }\n  });\n  await Axios.post(getUrl(\"UPDATE_REGION\"), { userIdx, region, areaCode, sggCode });\n  dispatch({ type: \"UPDATE_REGION\", payload: region });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst getPersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  if (response.status === 200) dispatch({ type: \"UPDATE_PERSONALITY\", payload: response.data.data.personalityType });\n\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // 기능 체크 완료\n  await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  dispatch({ type: \"UPDATE_PERSONALITY\", payload: data.personalityType });\n};\n\nconst getFeed = async (dispatch, data) => {\n  // // // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  const feed = await Axios.get(getUrl(\"GET_FEED\") + data.userIdx).catch(_ => []);\n  console.log(1, feed.data.data);\n\n  // // // 2. 내 즐겨찾기 아이템들\n  // const favorites = await Axios.post(getUrl(\"GET_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // // // 3. 내 좋아요 아이템들\n  // const likes = await Axios.post(getUrl(\"GET_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // const payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n  // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"GET_FEED\", payload: payload });\n};\n\nconst updateFavorites = async (dispatch, data) => {\n  // 1. 서버에 업데이트 콜 보내고\n  // await Axios.post(getUrl(\"UPDATE_FAVORITES\"), { data });\n  // 2. 디스패치\n  dispatch({ type: \"UPDATE_FAVORITES\", payload: data.favorites });\n};\n\nconst updateLikes = async (dispatch, data) => {\n  // 1. 서버에 업데이트 콜 보내고\n  // await Axios.post(getUrl(\"UPDATE_FAVORITES\"), { data });\n  // 2. 디스패치\n  dispatch({ type: \"UPDATE_LIKES\", payload: data.likes });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n    case \"REGISTER\":\n      return register(dispatch, data);\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n    case \"GET_FEED\":\n      return getFeed(dispatch, data);\n    case \"UPDATE_Favorites\":\n      return updateFavorites(dispatch, data);\n    case \"UPDATE_Likes\":\n      return updateLikes(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}