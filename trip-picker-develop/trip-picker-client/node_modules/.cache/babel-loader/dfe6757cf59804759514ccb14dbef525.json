{"ast":null,"code":"import Axios from \"axios\";\nimport { regionInfo } from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n\n    case \"GET_REGION\":\n      return rootUrl + \"???\";\n\n    case \"UPDATE_REGION\":\n      return rootUrl + \"???\";\n\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n\n    case \"UPDATE_FEED\":\n      return rootUrl + \"/?\";\n\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  }); // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(({ data }) => {\n  //     if (data.status === 200) dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data.userIdx });\n  //     else throw new Error(\"\");\n  //   })\n  //   .catch(_ => dispatch({ type: \"LOGIN_FAIL\" }));\n  // Below: TEST\n\n  dispatch({\n    type: \"LOGIN_SUCCESS\",\n    payload: 5\n  });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({\n    type: \"LOGIN_TRY\"\n  }); // const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email)\n  //   .then(({ data }) => {\n  //     if (data.status === 204) {\n  //       dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  //       return true;\n  //     } else return false;\n  //   })\n  //   .catch(_ => {\n  //     dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n  //     return true;\n  //   });\n  // if (isDuplicated) return;\n  // Axios.post(getUrl(\"REGISTER\"), data)\n  //   .then(({ data }) => {\n  //     if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n  //     else throw Error(\"\");\n  //   })\n  //   .catch(_ => dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" }));\n  // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n\n  dispatch({\n    type: \"REGISTER_SUCCESS\"\n  });\n};\n\nconst getRegion = async (dispatch, data) => {// TODO: 현재 해당 url이 작동하지 않음 + 원하는 결과(지역값)가 아님.\n  // const response = await Axios.get(getUrl(\"GET_REGION\" + data.id));\n  // if (response.status === 200) dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst updateRegion = async (dispatch, data) => {\n  // TODO: 보내는 URL 체크, data 형태 체크\n  // await Axios.post(getUrl(\"UPDATE_REGION\"), data);\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: data.region\n  });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({\n    type: \"UPDATE_REGION\",\n    payload: \"서울 마포구\"\n  });\n};\n\nconst getPersonality = async (dispatch, data) => {// const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  // if (response.status === 200) dispatch({ type: \"UPDATE_PERSONALITY\", payload: response.data.data.personalityType });\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  // 실패해도, 일단 로컬에서는 정상적으로 보여주기로 함\n  dispatch({\n    type: \"UPDATE_PERSONALITY\",\n    payload: data.personalityType\n  });\n};\n\nconst updateFeed = async (dispatch, data) => {// // // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  // const feed = await Axios.post(getUrl(\"UPDATE_FEED\"), { personal: data.personality || \"EXTREME_PERSONAL\" }).catch(_ => []);\n  // // // 2. 내 즐겨찾기 아이템들\n  // const favorites = await Axios.post(getUrl(\"UPDATE_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // // // 3. 내 좋아요 아이템들\n  // const likes = await Axios.post(getUrl(\"UPDATE_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // const payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] };\n  // dispatch({ type: \"UPDATE_FEED\", payload: payload });\n  // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"UPDATE_FEED\", payload: payload });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n\n    case \"REGISTER\":\n      return register(dispatch, data);\n\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n\n    case \"UPDATE_FEED\":\n      return updateFeed(dispatch, data);\n\n    default:\n      return;\n  }\n};\n\nexport { axios };","map":{"version":3,"sources":["/Users/roeniss/Desktop/workspace/sinsudong-crusher/trip-picker-develop/trip-picker-client/src/customAxios/index.js"],"names":["Axios","regionInfo","getUrl","subject","rootUrl","login","dispatch","data","type","payload","register","getRegion","updateRegion","region","recommenDRegion","getPersonality","updatePersonality","personalityType","updateFeed","axios","action"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport { regionInfo } from \"../helper/regionInfo\";\n\nconst getUrl = subject => {\n  const rootUrl = \"http://13.125.191.60:8080\";\n  switch (subject) {\n    case \"LOGIN\":\n      return rootUrl + \"/users/signin\";\n    case \"REGISTER\":\n      return rootUrl + \"/users/signup/\";\n    case \"IS_DUPLICATED\":\n      return rootUrl + \"/users/check?email=\";\n    case \"GET_REGION\":\n      return rootUrl + \"???\";\n    case \"UPDATE_REGION\":\n      return rootUrl + \"???\";\n    case \"RECOMMEND_REGION\":\n      return \"???\";\n    case \"GET_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"UPDATE_PERSONALITY\":\n      return rootUrl + \"/users/personalities/\";\n    case \"UPDATE_FEED\":\n      return rootUrl + \"/?\";\n    default:\n      return rootUrl;\n  }\n};\n\nconst login = async (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  // Axios.post(getUrl(\"LOGIN\"), data)\n  //   .then(({ data }) => {\n  //     if (data.status === 200) dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data.userIdx });\n  //     else throw new Error(\"\");\n  //   })\n  //   .catch(_ => dispatch({ type: \"LOGIN_FAIL\" }));\n\n  // Below: TEST\n  dispatch({ type: \"LOGIN_SUCCESS\", payload: 5 });\n};\n\nconst register = async (dispatch, data) => {\n  dispatch({ type: \"LOGIN_TRY\" });\n  // const isDuplicated = await Axios.get(getUrl(\"IS_DUPLICATED\") + data.email)\n  //   .then(({ data }) => {\n  //     if (data.status === 204) {\n  //       dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  //       return true;\n  //     } else return false;\n  //   })\n  //   .catch(_ => {\n  //     dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" });\n  //     return true;\n  //   });\n\n  // if (isDuplicated) return;\n\n  // Axios.post(getUrl(\"REGISTER\"), data)\n  //   .then(({ data }) => {\n  //     if (data.status === 201) return dispatch({ type: \"REGISTER_SUCCESS\", payload: data.id });\n  //     else throw Error(\"\");\n  //   })\n  //   .catch(_ => dispatch({ type: \"REGISTER_FAIL\", payload: \"회원가입에 실패했습니다\" }));\n\n  // Below: TEST\n  // dispatch({ type: \"REGISTER_FAIL\", payload: \"중복된 이메일입니다\" });\n  dispatch({ type: \"REGISTER_SUCCESS\" });\n};\n\nconst getRegion = async (dispatch, data) => {\n  // TODO: 현재 해당 url이 작동하지 않음 + 원하는 결과(지역값)가 아님.\n  // const response = await Axios.get(getUrl(\"GET_REGION\" + data.id));\n  // if (response.status === 200) dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\nconst updateRegion = async (dispatch, data) => {\n  // TODO: 보내는 URL 체크, data 형태 체크\n  // await Axios.post(getUrl(\"UPDATE_REGION\"), data);\n  dispatch({ type: \"UPDATE_REGION\", payload: data.region });\n};\n\nconst recommenDRegion = async (dispatch, data) => {\n  // TODO: 미성님 서버에 데이터 보내서 \"지역코드\" 리턴받기\n  // const response = Axios.post(getUrl(\"RECOMMEND_REGION\"), data);\n  // const regionCode = response.code;\n  // const fullRegion = regionInfo[regionCode][\"fullRegion\"];\n  // dispatch({ type: \"UPDATE_REGION\", payload: fullRegion });\n  // Below: TEST\n  dispatch({ type: \"UPDATE_REGION\", payload: \"서울 마포구\" });\n};\n\nconst getPersonality = async (dispatch, data) => {\n  // const response = await Axios.get(getUrl(\"GET_PERSONALITY\") + data.id);\n  // if (response.status === 200) dispatch({ type: \"UPDATE_PERSONALITY\", payload: response.data.data.personalityType });\n  // Below: TEST\n  // dispatch({ type: \"UPDATE_PERSONALITY\", payload: \"EXTREME_PERSONAL\" });\n};\n\nconst updatePersonality = async (dispatch, data) => {\n  // await Axios.post(getUrl(\"UPDATE_PERSONALITY\"), data);\n  // 실패해도, 일단 로컬에서는 정상적으로 보여주기로 함\n  dispatch({ type: \"UPDATE_PERSONALITY\", payload: data.personalityType });\n};\n\nconst updateFeed = async (dispatch, data) => {\n  // // // 1. 전체 (내 퍼소널리티에 맞는) 아이템들\n  // const feed = await Axios.post(getUrl(\"UPDATE_FEED\"), { personal: data.personality || \"EXTREME_PERSONAL\" }).catch(_ => []);\n  // // // 2. 내 즐겨찾기 아이템들\n  // const favorites = await Axios.post(getUrl(\"UPDATE_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // // // 3. 내 좋아요 아이템들\n  // const likes = await Axios.post(getUrl(\"UPDATE_FEED\"), { userIdx: data.userIdx }).catch(_ => []);\n  // const payload = { feed: feed || [], favorites: favorites || [], likes: likes || [] };\n  // dispatch({ type: \"UPDATE_FEED\", payload: payload });\n  // Below: TEST\n  // const payload = { feed: [], favorites: [], likes: [] };\n  // dispatch({ type: \"UPDATE_FEED\", payload: payload });\n};\n\nconst axios = (action, dispatch, data) => {\n  switch (action) {\n    case \"LOGIN\":\n      return login(dispatch, data);\n    case \"REGISTER\":\n      return register(dispatch, data);\n    case \"GET_REGION\":\n      return getRegion(dispatch, data);\n    case \"UPDATE_REGION\":\n      return updateRegion(dispatch, data);\n    case \"RECOMMEND_REGION\":\n      return recommenDRegion(dispatch, data);\n    case \"GET_PERSONALITY\":\n      return getPersonality(dispatch, data);\n    case \"UPDATE_PERSONALITY\":\n      return updatePersonality(dispatch, data);\n    case \"UPDATE_FEED\":\n      return updateFeed(dispatch, data);\n    default:\n      return;\n  }\n};\n\nexport { axios };\n"]},"metadata":{},"sourceType":"module"}